trigger:
  branches:
    include: 
    - master
variables:
  buildConfiguration: 'Release'
  acrHostName: 'crpayfavepaymentdev001.azurecr.io'
  imageName: 'poc-firstsample-webapi'
  webAppName: 'poc-firstsample-webapi'

stages:

# Build Stage
- stage: BuildAndTest
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 2.2.x
        installationPath: $(Agent.ToolsDirectory)/dotnet        
  
    # Restore dependencies
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '**/*.csproj'

    # Build app
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    # Run unit tests
    #- task: DotNetCoreCLI@2
    #  displayName: Test
    #  inputs:
    #    command: test
    #    projects: '**/FirstSample.Test/*.csproj'
    #    arguments: '--configuration $(BuildConfiguration)'

    # Publish the app
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(System.DefaultWorkingDirectory)/PublishedWebApp'
        zipAfterPublish: false

    # Build container image
    - task: Docker@1
      displayName: 'Build container image'
      inputs:
        azureSubscriptionEndpoint: 'AzureSC'
        azureContainerRegistry: '$(acrHostName)'
        imageName: '$(imageName):$(Build.BuildId)'
        useDefaultContext: false
        buildContext: '$(System.DefaultWorkingDirectory)/PublishedWebApp'

    # Push container image
    - task: Docker@1
      displayName: 'Push container image'
      inputs:
        azureSubscriptionEndpoint: 'AzureSC'
        azureContainerRegistry: '$(acrHostName)'
        command: 'Push an image'
        imageName: '$(imageName):$(Build.BuildId)'

    # Publish the app as an artifact
    - publish: $(Build.StagingDirectory)
      artifact: app

# Staging release
- stage: Staging
  jobs:
  - job: Release
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    # Don't clone the repo
    - checkout: none

    # Download the published application artifact
    - download: current
      artifact: app

    # Deploy App Service
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Azure App Service'
      inputs:
        azureSubscription: 'AzureSC'
        appType: applinux
        WebAppName: $(webAppName)
        DockerNamespace: $(acrHostName)
        DockerRepository: $(webAppName)
        DockerImageTag: '$(Build.BuildId)'
        WebAppUri: webAppUrl
        TakeAppOfflineFlag: true
        UseWebDeploy: true
        RenameFilesFlag: true